{"version":3,"sources":["webpack:///./node_modules/password-validator/src/lib.js","webpack:///./src/views/Import.vue?acae","webpack:///src/views/Import.vue","webpack:///./src/views/Import.vue?3e9c","webpack:///./src/views/Import.vue","webpack:///./node_modules/password-validator/src/constants.js","webpack:///./node_modules/password-validator/src/index.js"],"names":["regex","__webpack_require__","_process","regexp","RegExp","test","this","password","positive","module","exports","not","symbol","call","has","is","min","num","length","max","digits","letters","uppercase","lowercase","symbols","spaces","oneOf","list","indexOf","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","to","_v","method","on","submit","$event","preventDefault","submitForm","step","for","dirty","username","errors","_s","_e","directives","name","rawName","value","expression","modifiers","trim","key","id","type","autocorrect","autocapitalize","autocomplete","domProps","blur","handleBlur","$forceUpdate","input","target","composing","authority","class","mb-4","error","checked","Array","isArray","storeAccount","_i","change","$$a","$$el","$$c","$$v","$$i","concat","slice","disabled","nextDisabled","isLoading","click","submitNext","nextText","aria-label","TOOLTIP_IMPORT_ENCRYPTION_KEY","keyConfirmation","submitDisabled","query","redirect","staticRenderFns","passphraseSchema","src_default","a","Importvue_type_script_lang_js_","data","Object","utils","$route","auth","messages","computed","get","$store","state","persistentForms","import","set","commit","hasAccounts","keychain","current","validate","methods","objectSpread","vuex_esm","resetForm","startLogin","_startLogin","asyncToGenerator","regeneratorRuntime","mark","_callee","keys","_this","wrap","_context","prev","next","sent","abrupt","login","then","$router","push","catch","err","console","log","stop","apply","arguments","_submitNext","_callee2","invalidCredentials","_context2","_submitForm","_callee3","_this2","_context3","main_default","encrypt","Buffer","stringify_default","encryptError","buff","toString","views_Importvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","lib","_validateLength","Error","_isPasswordValidFor","property","_register","func","args","properties","PasswordValidator","prototype","pwd","options","reduce","errorList","every"],"mappings":"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","file":"js/import.2831e886.js","sourcesContent":["/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp) {\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presense of digits\n   */\n  digits: function digits() {\n    return _process.call(this, regex.digits);\n  },\n\n  /**\n   * Method to validate the presense of letters\n   */\n  letters: function letters() {\n    return _process.call(this, regex.letters);\n  },\n\n  /**\n   * Method to validate the presense of uppercase letters\n   */\n  uppercase: function uppercase() {\n    return _process.call(this, regex.uppercase);\n  },\n\n  /**\n   * Method to validate the presense of lowercase letters\n   */\n  lowercase: function lowercase() {\n    return _process.call(this, regex.lowercase);\n  },\n\n  /**\n   * Method to validate the presense of symbols\n   */\n  symbols: function symbols() {\n    return _process.call(this, regex.symbols);\n  },\n\n  /**\n   * Method to validate the presense of space\n   */\n  spaces: function spaces() {\n    return _process.call(this, regex.spaces);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  }\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Center',[_c('router-link',{staticClass:\"d-inline-block my-2 no-decoration\",attrs:{\"to\":\"/\"}},[_c('span',{staticClass:\"logo iconfont icon-steemconnect\"}),_c('h4',{staticClass:\"m-0\"},[_vm._v(\"steemconnect\")])]),_c('div',{staticClass:\"width-full p-4 mb-2\"},[_c('form',{staticClass:\"text-left\",attrs:{\"method\":\"post\"},on:{\"submit\":function($event){$event.preventDefault();return _vm.submitForm($event)}}},[(_vm.step === 1)?_c('div',[_c('label',{attrs:{\"for\":\"username\"}},[_vm._v(\"Steem username\")]),(_vm.dirty.username && !!_vm.errors.username)?_c('div',{staticClass:\"error mb-2\"},[_vm._v(\"\\n          \"+_vm._s(_vm.errors.username)+\"\\n        \")]):_vm._e(),_c('input',{directives:[{name:\"model\",rawName:\"v-model.trim\",value:(_vm.username),expression:\"username\",modifiers:{\"trim\":true}}],key:\"username\",staticClass:\"form-control input-lg input-block mb-2\",attrs:{\"id\":\"username\",\"type\":\"text\",\"autocorrect\":\"off\",\"autocapitalize\":\"none\",\"autocomplete\":\"username\"},domProps:{\"value\":(_vm.username)},on:{\"blur\":[function($event){return _vm.handleBlur('username')},function($event){return _vm.$forceUpdate()}],\"input\":function($event){if($event.target.composing){ return; }_vm.username=$event.target.value.trim()}}}),_c('label',{attrs:{\"for\":\"password\"}},[_vm._v(\" Steem password or \"+_vm._s(_vm.authority || 'private')+\" key \")]),(_vm.dirty.password && !!_vm.errors.password)?_c('div',{staticClass:\"error mb-2\"},[_vm._v(\"\\n          \"+_vm._s(_vm.errors.password)+\"\\n        \")]):_vm._e(),_c('input',{directives:[{name:\"model\",rawName:\"v-model.trim\",value:(_vm.password),expression:\"password\",modifiers:{\"trim\":true}}],key:\"password\",staticClass:\"form-control input-lg input-block mb-2\",attrs:{\"id\":\"password\",\"type\":\"password\",\"autocorrect\":\"off\",\"autocapitalize\":\"none\",\"autocomplete\":\"current-password\"},domProps:{\"value\":(_vm.password)},on:{\"blur\":[function($event){return _vm.handleBlur('password')},function($event){return _vm.$forceUpdate()}],\"input\":function($event){if($event.target.composing){ return; }_vm.password=$event.target.value.trim()}}}),_c('label',{staticClass:\"mb-2\",class:{ 'mb-4': !_vm.error }},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.storeAccount),expression:\"storeAccount\"}],key:\"storeAccount\",attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":Array.isArray(_vm.storeAccount)?_vm._i(_vm.storeAccount,null)>-1:(_vm.storeAccount)},on:{\"change\":function($event){var $$a=_vm.storeAccount,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.storeAccount=$$a.concat([$$v]))}else{$$i>-1&&(_vm.storeAccount=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.storeAccount=$$c}}}}),_vm._v(\" Keep the account on\\n          this computer\\n        \")]),(!!_vm.error)?_c('div',{staticClass:\"error mb-4\"},[_vm._v(_vm._s(_vm.error))]):_vm._e(),_c('button',{staticClass:\"btn btn-large btn-blue input-block mb-2\",attrs:{\"disabled\":_vm.nextDisabled || _vm.isLoading},on:{\"click\":function($event){$event.preventDefault();return _vm.submitNext($event)}}},[_vm._v(\"\\n          \"+_vm._s(_vm.nextText)+\"\\n        \")])]):_vm._e(),(_vm.step === 2)?_c('div',[_c('label',{attrs:{\"for\":\"key\"}},[_vm._v(\"\\n          Keychain password\\n          \"),_c('span',{staticClass:\"tooltipped tooltipped-n tooltipped-multiline\",attrs:{\"aria-label\":_vm.TOOLTIP_IMPORT_ENCRYPTION_KEY}},[_c('span',{staticClass:\"iconfont icon-info\"})])]),(_vm.dirty.key && !!_vm.errors.key)?_c('div',{staticClass:\"error mb-2\"},[_vm._v(\"\\n          \"+_vm._s(_vm.errors.key)+\"\\n        \")]):_vm._e(),_c('input',{directives:[{name:\"model\",rawName:\"v-model.trim\",value:(_vm.key),expression:\"key\",modifiers:{\"trim\":true}}],key:\"key\",staticClass:\"form-control input-lg input-block mb-2\",attrs:{\"id\":\"key\",\"type\":\"password\",\"autocorrect\":\"off\",\"autocapitalize\":\"none\",\"autocomplete\":\"new-password\"},domProps:{\"value\":(_vm.key)},on:{\"blur\":[function($event){return _vm.handleBlur('key')},function($event){return _vm.$forceUpdate()}],\"input\":function($event){if($event.target.composing){ return; }_vm.key=$event.target.value.trim()}}}),_c('label',{attrs:{\"for\":\"key-confirmation\"}},[_vm._v(\"Confirm password\")]),(_vm.dirty.keyConfirmation && !!_vm.errors.keyConfirmation)?_c('div',{staticClass:\"error mb-2\"},[_vm._v(\"\\n          \"+_vm._s(_vm.errors.keyConfirmation)+\"\\n        \")]):_vm._e(),_c('input',{directives:[{name:\"model\",rawName:\"v-model.trim\",value:(_vm.keyConfirmation),expression:\"keyConfirmation\",modifiers:{\"trim\":true}}],key:\"keyConfirmation\",staticClass:\"form-control input-lg input-block mb-2\",attrs:{\"id\":\"key-confirmation\",\"type\":\"password\",\"autocorrect\":\"off\",\"autocapitalize\":\"none\",\"autocomplete\":\"new-password\"},domProps:{\"value\":(_vm.keyConfirmation)},on:{\"blur\":[function($event){return _vm.handleBlur('keyConfirmation')},function($event){return _vm.$forceUpdate()}],\"input\":function($event){if($event.target.composing){ return; }_vm.keyConfirmation=$event.target.value.trim()}}}),_c('legend',{staticClass:\"mb-4 d-block\"},[_vm._v(\"\\n          The keychain password will be required to unlock your account for usage.\\n        \")]),_c('button',{staticClass:\"btn btn-large btn-blue input-block mb-2\",attrs:{\"disabled\":_vm.submitDisabled || _vm.isLoading,\"type\":\"submit\"}},[_vm._v(\"\\n          Get started\\n        \")])]):_vm._e(),(_vm.hasAccounts)?_c('router-link',{staticClass:\"btn btn-large input-block text-center mb-2\",attrs:{\"to\":{ name: 'login', query: { redirect: _vm.redirect, authority: _vm.authority } }}},[_vm._v(\"\\n        Log in instead\\n      \")]):_vm._e()],1)]),_c('Footer')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <Center>\n    <router-link to=\"/\" class=\"d-inline-block my-2 no-decoration\">\n      <span class=\"logo iconfont icon-steemconnect\" />\n      <h4 class=\"m-0\">steemconnect</h4>\n    </router-link>\n    <div class=\"width-full p-4 mb-2\">\n      <form @submit.prevent=\"submitForm\" method=\"post\" class=\"text-left\">\n        <div v-if=\"step === 1\">\n          <label for=\"username\">Steem username</label>\n          <div v-if=\"dirty.username && !!errors.username\" class=\"error mb-2\">\n            {{ errors.username }}\n          </div>\n          <input\n            key=\"username\"\n            v-model.trim=\"username\"\n            id=\"username\"\n            type=\"text\"\n            class=\"form-control input-lg input-block mb-2\"\n            autocorrect=\"off\"\n            autocapitalize=\"none\"\n            autocomplete=\"username\"\n            @blur=\"handleBlur('username')\"\n          />\n          <label for=\"password\"> Steem password or {{ authority || 'private' }} key </label>\n          <div v-if=\"dirty.password && !!errors.password\" class=\"error mb-2\">\n            {{ errors.password }}\n          </div>\n          <input\n            key=\"password\"\n            v-model.trim=\"password\"\n            id=\"password\"\n            type=\"password\"\n            autocorrect=\"off\"\n            autocapitalize=\"none\"\n            autocomplete=\"current-password\"\n            class=\"form-control input-lg input-block mb-2\"\n            @blur=\"handleBlur('password')\"\n          />\n          <label class=\"mb-2\" :class=\"{ 'mb-4': !error }\">\n            <input key=\"storeAccount\" v-model=\"storeAccount\" type=\"checkbox\" /> Keep the account on\n            this computer\n          </label>\n          <div v-if=\"!!error\" class=\"error mb-4\">{{ error }}</div>\n          <button\n            :disabled=\"nextDisabled || isLoading\"\n            class=\"btn btn-large btn-blue input-block mb-2\"\n            @click.prevent=\"submitNext\"\n          >\n            {{ nextText }}\n          </button>\n        </div>\n        <div v-if=\"step === 2\">\n          <label for=\"key\">\n            Keychain password\n            <span\n              class=\"tooltipped tooltipped-n tooltipped-multiline\"\n              :aria-label=\"TOOLTIP_IMPORT_ENCRYPTION_KEY\"\n            >\n              <span class=\"iconfont icon-info\" />\n            </span>\n          </label>\n          <div v-if=\"dirty.key && !!errors.key\" class=\"error mb-2\">\n            {{ errors.key }}\n          </div>\n          <input\n            key=\"key\"\n            id=\"key\"\n            v-model.trim=\"key\"\n            type=\"password\"\n            autocorrect=\"off\"\n            autocapitalize=\"none\"\n            autocomplete=\"new-password\"\n            class=\"form-control input-lg input-block mb-2\"\n            @blur=\"handleBlur('key')\"\n          />\n          <label for=\"key-confirmation\">Confirm password</label>\n          <div v-if=\"dirty.keyConfirmation && !!errors.keyConfirmation\" class=\"error mb-2\">\n            {{ errors.keyConfirmation }}\n          </div>\n          <input\n            key=\"keyConfirmation\"\n            id=\"key-confirmation\"\n            v-model.trim=\"keyConfirmation\"\n            type=\"password\"\n            autocorrect=\"off\"\n            autocapitalize=\"none\"\n            autocomplete=\"new-password\"\n            class=\"form-control input-lg input-block mb-2\"\n            @blur=\"handleBlur('keyConfirmation')\"\n          />\n          <legend class=\"mb-4 d-block\">\n            The keychain password will be required to unlock your account for usage.\n          </legend>\n          <button\n            :disabled=\"submitDisabled || isLoading\"\n            type=\"submit\"\n            class=\"btn btn-large btn-blue input-block mb-2\"\n          >\n            Get started\n          </button>\n        </div>\n        <router-link\n          v-if=\"hasAccounts\"\n          :to=\"{ name: 'login', query: { redirect, authority } }\"\n          class=\"btn btn-large input-block text-center mb-2\"\n        >\n          Log in instead\n        </router-link>\n      </form>\n    </div>\n    <Footer />\n  </Center>\n</template>\n\n<script>\nimport { mapActions } from 'vuex';\nimport triplesec from 'triplesec';\nimport PasswordValidator from 'password-validator';\nimport { credentialsValid, getKeys, getAuthority } from '@/helpers/auth';\nimport { addToKeychain, hasAccounts } from '@/helpers/keychain';\nimport { ERROR_INVALID_CREDENTIALS, TOOLTIP_IMPORT_ENCRYPTION_KEY } from '@/helpers/messages.json';\nimport { isWeb } from '@/helpers/utils';\n\nconst passphraseSchema = new PasswordValidator();\n\npassphraseSchema\n  .is()\n  .min(8)\n  .is()\n  .max(50)\n  .has()\n  .uppercase()\n  .has()\n  .lowercase();\n\nexport default {\n  data() {\n    return {\n      dirty: {\n        username: false,\n        password: false,\n        key: false,\n        keyConfirmation: false,\n      },\n      error: '',\n      storeAccount: !isWeb(),\n      isLoading: false,\n      redirect: this.$route.query.redirect,\n      authority: getAuthority(this.$route.query.authority),\n      TOOLTIP_IMPORT_ENCRYPTION_KEY,\n    };\n  },\n  computed: {\n    step: {\n      get() {\n        return this.$store.state.persistentForms.import.step;\n      },\n      set(value) {\n        this.$store.commit('saveImportStep', value);\n      },\n    },\n    username: {\n      get() {\n        return this.$store.state.persistentForms.import.username;\n      },\n      set(value) {\n        this.$store.commit('saveImportUsername', value);\n      },\n    },\n    password: {\n      get() {\n        return this.$store.state.persistentForms.import.password;\n      },\n      set(value) {\n        this.$store.commit('saveImportPassword', value);\n      },\n    },\n    key: {\n      get() {\n        return this.$store.state.persistentForms.import.key;\n      },\n      set(value) {\n        this.$store.commit('saveImportKey', value);\n      },\n    },\n    keyConfirmation: {\n      get() {\n        return this.$store.state.persistentForms.import.keyConfirmation;\n      },\n      set(value) {\n        this.$store.commit('saveImportKeyConfirmation', value);\n      },\n    },\n    hasAccounts() {\n      return hasAccounts();\n    },\n    errors() {\n      const current = {};\n      const { username, password, key, keyConfirmation } = this;\n\n      if (!username) {\n        current.username = 'Username is required.';\n      }\n\n      if (!password) {\n        current.password = 'Password is required.';\n      }\n\n      if (!key) {\n        current.key = 'Keychain password is required.';\n      } else if (!passphraseSchema.validate(key)) {\n        current.key =\n          'Keychain password has to be at least 8 characters long and contain lowercase letter and uppercase letter.';\n      }\n\n      if (!keyConfirmation) {\n        current.keyConfirmation = 'Keychain password confirmation is required.';\n      } else if (keyConfirmation !== key) {\n        current.keyConfirmation = 'Keychain passwords do not match.';\n      }\n\n      return current;\n    },\n    nextText() {\n      return this.storeAccount ? 'Continue' : 'Get started';\n    },\n    nextDisabled() {\n      return !!this.errors.username || !!this.errors.password;\n    },\n    submitDisabled() {\n      return !!this.errors.key || !!this.errors.keyConfirmation;\n    },\n  },\n  methods: {\n    ...mapActions(['login']),\n    resetForm() {\n      this.dirty = {\n        username: false,\n        password: false,\n        key: false,\n        keyConfirmation: false,\n      };\n\n      this.step = 1;\n      this.username = '';\n      this.password = '';\n      this.key = '';\n      this.keyConfirmation = '';\n    },\n    handleBlur(name) {\n      this.dirty[name] = true;\n    },\n    async startLogin() {\n      this.isLoading = true;\n\n      const { username, password, authority } = this;\n      const keys = await getKeys(username, password);\n\n      if (authority && !keys[authority]) {\n        this.isLoading = false;\n        this.error = `You need to use master or ${authority} key to log in.`;\n        return;\n      }\n\n      this.login({ username, keys })\n        .then(() => {\n          const { redirect } = this.$route.query;\n          this.$router.push(redirect || '/');\n          this.isLoading = false;\n          this.error = '';\n\n          this.resetForm();\n        })\n        .catch(err => {\n          console.log('Login failed', err);\n          this.isLoading = false;\n          this.error = ERROR_INVALID_CREDENTIALS;\n        });\n    },\n    async submitNext() {\n      const { username, password } = this;\n\n      this.isLoading = true;\n      const invalidCredentials = !(await credentialsValid(username, password));\n      this.isLoading = false;\n\n      if (invalidCredentials) {\n        this.error = ERROR_INVALID_CREDENTIALS;\n        return;\n      }\n\n      this.error = '';\n\n      if (this.storeAccount) {\n        this.step += 1;\n      } else {\n        this.startLogin();\n      }\n    },\n    async submitForm() {\n      const { username, password, key } = this;\n\n      this.isLoading = true;\n      const keys = await getKeys(username, password);\n\n      triplesec.encrypt(\n        {\n          data: new triplesec.Buffer(JSON.stringify(keys)),\n          key: new triplesec.Buffer(key),\n        },\n        (encryptError, buff) => {\n          if (encryptError) {\n            this.isLoading = false;\n            console.log('err', encryptError);\n            return;\n          }\n\n          addToKeychain(username, buff.toString('hex'));\n\n          this.startLogin();\n        },\n      );\n    },\n  },\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Import.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Import.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Import.vue?vue&type=template&id=1d48b0ec&\"\nimport script from \"./Import.vue?vue&type=script&lang=js&\"\nexport * from \"./Import.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = {\n  error: {\n    length: 'Length should be a valid positive number',\n    password: 'Password should be a valid string'\n  },\n  regex: {\n    digits: /\\d+/,\n    letters: /[a-zA-Z]+/,\n    uppercase: /[A-Z]+/,\n    lowercase: /[a-z]+/,\n    symbols: /[`~\\!@#\\$%\\^\\&\\*\\(\\)\\-_\\=\\+\\[\\{\\}\\]\\\\\\|;:'\",<.>\\/\\?€£¥₹]+/,\n    spaces: /[\\s]+/\n  }\n};\n","var lib = require('./lib');\nvar error = require('./constants').error;\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  if (!num || typeof num !== 'number' || num < 0) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({ method: func, arguments: args });\n  return this;\n}\n\n/**\n * Creates a password-validator schema\n *\n * @constructor\n */\nfunction PasswordValidator() {\n  // Initialize a schema with no properties defined\n  this.properties = [];\n}\n\n/**\n * Method to validate the password against schema\n *\n * @param {string} pwd - password to valdiate\n * @param {object} options - optional options to configure validation\n * @param {boolean} [options.list] - asks for a list of validation\n *           failures instead of just true/false\n * @return {boolean|array} Boolean value indicting the validity\n *           of the password as per schema, if 'options.list'\n *           is not set. Otherwise, it returns an array of\n *           property names which failed validations\n */\nPasswordValidator.prototype.validate = function (pwd, options) {\n  // Checks if pwd is invalid\n  if (typeof pwd !== 'string') {\n    throw new Error(error.password);\n  }\n\n  // Sets password string\n  this.password = pwd;\n\n  // Sets that no inversion takes place by default\n  this.positive = true;\n\n  var _this = this;\n\n  if (options && options.list === true) {\n    return this.properties.reduce(function (errorList, property) {\n      // Applies all validations defined in lib one by one\n      if (!_isPasswordValidFor.call(_this, property)) {\n        // If the validation for a property fails,\n        // add it to the error list\n        return errorList.concat(property.method);\n      }\n      return errorList;\n    }, []);\n  }\n\n  // Returns the result of the validations\n  return this.properties.every(function (property) {\n    // Applies all validations defined in lib one by one\n    return _isPasswordValidFor.call(_this, property);\n  });\n};\n\n/**\n * Rule to invert the next applied rules.\n * All the rules applied after 'not' will have opposite effect,\n * until 'has' rule is applied\n */\nPasswordValidator.prototype.not = function not() {\n  return _register.call(this, 'not', arguments);\n};\n\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'has' is also used\n * to make the api readable and chainable\n */\nPasswordValidator.prototype.has = function has() {\n  return _register.call(this, 'has', arguments);\n};\n\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'is' is also used\n * to make the api readable and chainable\n */\nPasswordValidator.prototype.is = function is() {\n  return _register.call(this, 'is', arguments);\n};\n\n/**\n * Rule to specify a minimum length of the password\n *\n * @param {number} num - minimum length\n */\nPasswordValidator.prototype.min = function min(num) {\n  _validateLength(num);\n  return _register.call(this, 'min', arguments);\n};\n\n/**\n * Rule to specify a maximum length of the password\n *\n * @param {number} num - maximum length\n */\nPasswordValidator.prototype.max = function max(num) {\n  _validateLength(num);\n  return _register.call(this, 'max', arguments);\n};\n\n/**\n * Rule to mendate the presense of digits in the password\n */\nPasswordValidator.prototype.digits = function digits() {\n  return _register.call(this, 'digits', arguments);\n};\n\n/**\n * Rule to mendate the presense of letters in the password\n */\nPasswordValidator.prototype.letters = function letters() {\n  return _register.call(this, 'letters', arguments);\n};\n\n/**\n * Rule to mendate the presense of uppercase letters in the password\n */\nPasswordValidator.prototype.uppercase = function uppercase() {\n  return _register.call(this, 'uppercase', arguments);\n};\n\n/**\n * Rule to mendate the presense of lowercase letters in the password\n */\nPasswordValidator.prototype.lowercase = function lowercase() {\n  return _register.call(this, 'lowercase', arguments);\n};\n\n/**\n * Rule to mendate the presense of symbols in the password\n */\nPasswordValidator.prototype.symbols = function symbols() {\n  return _register.call(this, 'symbols', arguments);\n};\n\n/**\n * Rule to mendate the presense of space in the password\n * It can be used along with 'not' to not allow spaces\n * in the password\n */\nPasswordValidator.prototype.spaces = function spaces() {\n  return _register.call(this, 'spaces', arguments);\n};\n\n/**\n * Rule to whitelist words to be used as password\n *\n * @param {array} list - list of values allowed\n */\nPasswordValidator.prototype.oneOf = function oneOf() {\n  return _register.call(this, 'oneOf', arguments);\n};\n\nmodule.exports = PasswordValidator;\n"],"sourceRoot":""}